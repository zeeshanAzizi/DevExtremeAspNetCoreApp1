@page
@using DevExtremeAspNetCoreApp1.Models

<h2>Home</h2>

@(Html.DevExtreme().DataGrid<Student>()

    .DataSource(d => d.Mvc().Controller("SampleData").LoadAction("Student")
    .InsertAction("Insert")
    .UpdateAction("Update")
    .DeleteAction("Delete")
    .Key("ID"))
    .ShowBorders(true)
    .Paging(p => p.PageSize(10))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .SearchPanel(sp => sp.Visible(true))
    .Editing(e => e.Mode(GridEditMode.Popup)
    .AllowUpdating(true)
    .AllowAdding(true)
    .AllowDeleting(true)
    .Popup(p => p
    .Title("Student Infomation")
    .ShowTitle(true)
    .Width(700)
    .Height(525)
    )
    .Form(f => f.Items(items => {
        items.AddGroup()
        .ColCount(2)
        .ColSpan(2)
        .Items(groupItems => {
            groupItems.AddSimpleFor(m => m.Name);
            groupItems.AddSimpleFor(m => m.Gender);
            groupItems.AddSimpleFor(m => m.Email);
            groupItems.AddSimpleFor(m => m.Mobile);
            groupItems.AddSimpleFor(m => m.Fee);
        });
        items.AddGroup()
                    .Caption("Home Address")
                    .ColCount(2)
                    .ColSpan(2)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.CountryID);
                        groupItems.AddSimpleFor(m => m.Address);
                    }).Items(groupItems=>
                    {
                        groupItems.AddSimpleFor(m => m.StateID);
                    });

    }))
    )
    .OnEditorPreparing("onEditorPreparing")
    .Columns(columns => {
        columns.AddFor(m => m.ID);
        columns.AddFor(m => m.Name);
        columns.AddFor(m => m.Gender);
        columns.AddFor(m => m.Email);
        columns.AddFor(m => m.Mobile);
        columns.AddFor(m => m.Address);
        columns.AddFor(m => m.Fee);
        columns.AddFor(m => m.CountryID)
               .Width(125)
               .SetCellValue("setStateValue")
                    .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Country").LoadAction("Get").Key("ID"))
                    .DisplayExpr("CountryName")
                    .ValueExpr("ID")
                );
        columns.AddFor(m => m.StateID)
               .Width(125)
                    .Lookup(lookup => lookup
                    //.DataSource(d => d.Mvc().Controller("State").LoadAction("GetState").Key("ID"))
                    .DataSource("getState")
                    .DisplayExpr("StateName")
                    .ValueExpr("ID")
                );
        //columns.AddFor(m => m.SkillID)
        //    .AllowSorting(false)
        //    .Caption("Skills")
        //    .Lookup(lookup => lookup
        //        .DataSource(d => d.Mvc().Controller("Skill").LoadAction("GetSkill").Key("ID"))
        //        .ValueExpr("ID")
        //        .DisplayExpr("SkillName")
        //    )
        //    .CellTemplate(new JS("cellTemplate"))
        //    .CalculateFilterExpression("calculateFilterExpression")
        //    .EditCellTemplate(new TemplateName("TagBoxTemplate"))
        //    .Width(200);



    })

    )
<script>
    function onEditorPreparing(e) {
        if(e.parentType === "dataRow" && e.dataField === "StateID") {
            e.editorOptions.disabled = (typeof e.row.data.CountryID !== "number");
        }
    }
    function getState(options) {
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "ID",
                loadUrl: '@Url.Action("GetState", "State", new { httproute = true })'
            }),
            filter: options.data ? ["CountryID", "=", options.data.CountryID] : null
        };
    }
    function setStateValue(rowData, value) {
        rowData.CountryID = value;
        rowData.StateID = null;
    }
    //function calculateFilterExpression(filterValue, selectedFilterOperation, target) {
    //    if (target === "search" && typeof (filterValue) === "string") {
    //        return [this.dataField, "contains", filterValue]
    //    }
    //    return function (data) {
    //        return (data.SkillID || []).indexOf(filterValue) !== -1
    //    }
    //}

</script>
